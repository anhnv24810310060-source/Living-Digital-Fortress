---
# Credits Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: credits-service
  namespace: shieldx-prod
  labels:
    app: credits-service
    tier: business-logic
    managed-by: person3
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: credits-service
  template:
    metadata:
      labels:
        app: credits-service
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5004"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: credits-service
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
        seccompProfile:
          type: RuntimeDefault
      
      # Anti-affinity to spread pods across nodes
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - credits-service
              topologyKey: kubernetes.io/hostname
      
      containers:
      - name: credits
        image: shieldx/credits-service:v1.0.0
        imagePullPolicy: IfNotPresent
        
        ports:
        - name: http
          containerPort: 5004
          protocol: TCP
        
        env:
        - name: PORT
          value: "5004"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: credits-db-secret
              key: connection-string
        - name: REDIS_ADDR
          value: "redis-master:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        - name: AUDIT_HMAC_KEY
          valueFrom:
            secretKeyRef:
              name: credits-secrets
              key: audit-hmac-key
        - name: CREDITS_API_KEY
          valueFrom:
            secretKeyRef:
              name: credits-secrets
              key: api-key
        - name: MIGRATE_ON_START
          value: "false"  # Run migrations separately
        - name: BACKUP_BEFORE_MIGRATE
          value: "true"
        - name: GO_MAX_PROCS
          value: "2"
        
        # Resource limits (P0 requirement)
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 2000m
            memory: 2Gi
        
        # Liveness probe - restart if unhealthy
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        # Readiness probe - remove from service if not ready
        readinessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 2
        
        # Startup probe - allow slow startup
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        
        # Volume mounts for tmp and cache
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
      
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}

---
# Credits Service
apiVersion: v1
kind: Service
metadata:
  name: credits-service
  namespace: shieldx-prod
  labels:
    app: credits-service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
  - name: http
    port: 5004
    targetPort: http
    protocol: TCP
  selector:
    app: credits-service

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: credits-service-hpa
  namespace: shieldx-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: credits-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 30
      selectPolicy: Max

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: credits-service-pdb
  namespace: shieldx-prod
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: credits-service

---
# ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: credits-service
  namespace: shieldx-prod
  labels:
    app: credits-service

---
# Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: credits-service-netpol
  namespace: shieldx-prod
spec:
  podSelector:
    matchLabels:
      app: credits-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow from orchestrator and guardian
  - from:
    - podSelector:
        matchLabels:
          app: orchestrator
    - podSelector:
        matchLabels:
          app: guardian
    ports:
    - protocol: TCP
      port: 5004
  # Allow from prometheus
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 5004
  egress:
  # Allow to PostgreSQL
  - to:
    - podSelector:
        matchLabels:
          app: postgres-credits
    ports:
    - protocol: TCP
      port: 5432
  # Allow to Redis
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  # Allow DNS
  - to:
    - namespaceSelector: {}
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53

---
# ConfigMap for database migrations
apiVersion: v1
kind: ConfigMap
metadata:
  name: credits-migrations
  namespace: shieldx-prod
data:
  run-migrations.sh: |
    #!/bin/bash
    set -e
    echo "Starting database migration for credits service..."
    
    # Wait for database to be ready
    until pg_isready -h $DB_HOST -p $DB_PORT -U $DB_USER; do
      echo "Waiting for database..."
      sleep 2
    done
    
    # Backup database before migration
    if [ "$BACKUP_BEFORE_MIGRATE" = "true" ]; then
      echo "Creating backup..."
      pg_dump -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME > /backups/credits_backup_$(date +%Y%m%d_%H%M%S).sql
      echo "Backup completed"
    fi
    
    # Run migrations
    echo "Running migrations..."
    /app/migrate -path /migrations -database "$DATABASE_URL" up
    
    echo "Migrations completed successfully"

---
# CronJob for cleanup of expired idempotency keys
apiVersion: batch/v1
kind: CronJob
metadata:
  name: credits-cleanup
  namespace: shieldx-prod
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: credits-cleanup
        spec:
          restartPolicy: OnFailure
          containers:
          - name: cleanup
            image: postgres:16-alpine
            env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: credits-db-secret
                  key: connection-string
            command:
            - /bin/sh
            - -c
            - |
              psql $DATABASE_URL -c "DELETE FROM idempotency_keys WHERE expires_at < NOW() - INTERVAL '7 days'"
              psql $DATABASE_URL -c "VACUUM ANALYZE idempotency_keys"
