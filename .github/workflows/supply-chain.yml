name: Supply Chain - SBOM, Snapshot, (optional) Image Sign

on:
  workflow_dispatch:
    inputs:
      image:
        description: "Container image to sign (e.g., ghcr.io/org/repo:tag)"
        required: false
        type: string
  push:
    branches: [ main ]

permissions:
  contents: read
  packages: write   # push to GHCR
  id-token: write   # for cosign keyless

jobs:
  supply-chain:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Create dist folders
        run: |
          mkdir -p dist/sbom

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.17.9
        with:
          syft-version: v1.16.0

      - name: Generate SBOM (Go repo root)
        run: |
          syft packages dir:. -o cyclonedx-json > dist/sbom/sbom-go.json

      - name: Generate SBOM (ml-service)
        run: |
          syft packages dir:ml-service -o cyclonedx-json > dist/sbom/sbom-python.json

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-artifacts
          path: dist/sbom/*.json

      - name: Set up GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --snapshot --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload snapshot artifacts
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-binaries
          path: |
            dist/*.tar.gz
            dist/checksums.txt

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.4.1'

      - name: (Optional) Cosign sign image
        if: inputs.image != ''
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign --yes "${{ inputs.image }}"

  container-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      matrix:
        include:
          - name: ingress
            dockerfile: docker/Dockerfile.ingress
          - name: locator
            dockerfile: docker/Dockerfile.locator
          - name: ml-orchestrator
            dockerfile: docker/Dockerfile.ml-orchestrator
          - name: verifier-pool
            dockerfile: docker/Dockerfile.verifier-pool
          - name: contauth
            dockerfile: docker/Dockerfile.contauth
          - name: shieldx-gateway
            dockerfile: docker/Dockerfile.shieldx-gateway
          - name: policy-rollout
            dockerfile: docker/Dockerfile.policy-rollout
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Define image name
        id: meta
        run: |
          IMAGE="ghcr.io/${{ github.repository_owner }}/ldf-${{ matrix.name }}:${{ github.sha }}"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.image }}
          provenance: false

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.17.9
        with:
          syft-version: v1.16.0

      - name: Generate SBOM for image (CycloneDX)
        run: |
          mkdir -p dist/sbom
          syft packages ${{ steps.meta.outputs.image }} -o cyclonedx-json > dist/sbom/sbom-${{ matrix.name }}.json

      - name: Upload SBOM artifact (per image)
        uses: actions/upload-artifact@v4
        with:
          name: sbom-image-${{ matrix.name }}
          path: dist/sbom/sbom-${{ matrix.name }}.json

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.4.1'

      - name: Cosign sign pushed image (keyless)
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign --yes "${{ steps.meta.outputs.image }}@${{ steps.build.outputs.digest }}"
name: Supply Chain

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      image:
        description: "Container image to sign (e.g., ghcr.io/org/app:tag)"
        required: false
        type: string

permissions:
  contents: read
  id-token: write

jobs:
  sbom:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.17.9

      - name: Generate SBOMs
        run: |
          make sbom-all

      - name: Upload SBOM Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-artifacts
          path: dist/sbom/**

  snapshot:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install Goreleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          distribution: goreleaser-pro
          install-only: true
        env:
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY || '' }}

      - name: Run snapshot release
        run: |
          make release-snapshot

  image-sign:
    if: ${{ inputs.image != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: Keyless sign image
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          make image-sign IMAGE='${{ inputs.image }}'
