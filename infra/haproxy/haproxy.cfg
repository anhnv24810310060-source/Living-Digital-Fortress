global
    log stdout format raw local0 info
    maxconn 4096
    user haproxy
    group haproxy
    daemon
    
    # Security - Modern TLS configuration
    ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    ssl-default-server-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-server-options ssl-min-ver TLSv1.2
    
defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    option  http-server-close
    option  redispatch
    retries 3
    timeout connect 5000
    timeout client  50000
    timeout server  50000
    timeout http-request 10s
    timeout http-keep-alive 10s
    
# Stats page
listen stats
    bind *:8404
    mode http
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if TRUE
    stats auth admin:shieldx2025

# Frontend - Main entry point
frontend shieldx_frontend
    bind *:80
    bind *:443 ssl crt /etc/haproxy/certs/shieldx.pem alpn h2,http/1.1
    
    # Security headers
    http-response set-header X-Frame-Options SAMEORIGIN
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    
    # HTTP to HTTPS redirect
    redirect scheme https code 301 if !{ ssl_fc }
    
    # ACLs for routing
    acl is_ingress path_beg /api/v1
    acl is_gateway path_beg /gateway
    acl is_auth path_beg /auth
    acl is_contauth path_beg /contauth
    acl is_credits path_beg /credits
    acl is_guardian path_beg /guardian
    acl is_shadow path_beg /shadow
    acl is_orchestrator path_beg /orchestrator
    acl is_health path /health
    acl is_metrics path /metrics
    
    # Health check bypass
    use_backend health_backend if is_health
    
    # Metrics backend
    use_backend metrics_backend if is_metrics
    
    # Route to appropriate backends
    use_backend ingress_backend if is_ingress
    use_backend gateway_backend if is_gateway
    use_backend auth_backend if is_auth
    use_backend contauth_backend if is_contauth
    use_backend credits_backend if is_credits
    use_backend guardian_backend if is_guardian
    use_backend shadow_backend if is_shadow
    use_backend orchestrator_backend if is_orchestrator
    
    default_backend ingress_backend

# Backend - Ingress Service
backend ingress_backend
    balance roundrobin
    option httpchk GET /healthz
    http-check expect status 200
    
    server ingress1 ingress:8081 check inter 2000 rise 2 fall 3 maxconn 100
    server ingress2 ingress:8081 check inter 2000 rise 2 fall 3 maxconn 100 backup

# Backend - Gateway Service
backend gateway_backend
    balance leastconn
    option httpchk GET /health
    http-check expect status 200
    
    server gateway1 shieldx-gateway:8082 check inter 2000 rise 2 fall 3 maxconn 100
    server gateway2 shieldx-gateway:8082 check inter 2000 rise 2 fall 3 maxconn 100 backup

# Backend - Auth Service
backend auth_backend
    balance roundrobin
    option httpchk GET /health
    
    server auth1 localhost:5001 check inter 2000 rise 2 fall 3 maxconn 50
    server auth2 localhost:5001 check inter 2000 rise 2 fall 3 maxconn 50 backup

# Backend - ContAuth Service
backend contauth_backend
    balance roundrobin
    option httpchk GET /health
    
    server contauth1 contauth:5002 check inter 2000 rise 2 fall 3 maxconn 50
    server contauth2 contauth:5002 check inter 2000 rise 2 fall 3 maxconn 50 backup

# Backend - Credits Service
backend credits_backend
    balance roundrobin
    option httpchk GET /health
    
    server credits1 credits:5004 check inter 2000 rise 2 fall 3 maxconn 50
    server credits2 credits:5004 check inter 2000 rise 2 fall 3 maxconn 50 backup

# Backend - Guardian Service
backend guardian_backend
    balance roundrobin
    option httpchk GET /healthz
    timeout server 120s
    
    server guardian1 guardian:9090 check inter 5000 rise 2 fall 3 maxconn 30
    server guardian2 guardian:9090 check inter 5000 rise 2 fall 3 maxconn 30 backup

# Backend - Shadow Evaluation Service
backend shadow_backend
    balance roundrobin
    option httpchk GET /health
    
    server shadow1 shadow:5005 check inter 2000 rise 2 fall 3 maxconn 50
    server shadow2 shadow:5005 check inter 2000 rise 2 fall 3 maxconn 50 backup

# Backend - Orchestrator Service
backend orchestrator_backend
    balance roundrobin
    option httpchk GET /health
    
    server orchestrator1 localhost:8080 check inter 2000 rise 2 fall 3 maxconn 100
    server orchestrator2 localhost:8080 check inter 2000 rise 2 fall 3 maxconn 100 backup

# Backend - Metrics aggregation
backend metrics_backend
    balance roundrobin
    option httpchk GET /health
    
    server prometheus localhost:9091 check inter 5000 rise 2 fall 3

# Backend - Health check
backend health_backend
    http-request return status 200 content-type text/plain string "OK"
