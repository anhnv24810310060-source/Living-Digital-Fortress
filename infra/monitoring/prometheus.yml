# Prometheus Configuration for Living Digital Fortress
# PERSON 3 Production Monitoring Stack
# Monitors: Event Sourcing, Sharding, DR, Deployment, Compliance

global:
  scrape_interval: 30s
  evaluation_interval: 30s
  external_labels:
    cluster: 'living-fortress-production'
    environment: 'production'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
            - alertmanager:9093

# Load rules once and periodically evaluate them
rule_files:
  - "/etc/prometheus/rules/*.yml"

# Scrape configurations
scrape_configs:
  # ==========================================================================
  # CREDITS SERVICE (Blue/Green)
  # ==========================================================================
  - job_name: 'credits-service-blue'
    kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
            - living-fortress
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app]
        action: keep
        regex: credits-service
      - source_labels: [__meta_kubernetes_pod_label_version]
        action: keep
        regex: blue
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__meta_kubernetes_namespace]
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        target_label: kubernetes_pod_name
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: 'go_.*'
        action: drop

  - job_name: 'credits-service-green'
    kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
            - living-fortress
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app]
        action: keep
        regex: credits-service
      - source_labels: [__meta_kubernetes_pod_label_version]
        action: keep
        regex: green
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__meta_kubernetes_namespace]
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        target_label: kubernetes_pod_name

  # ==========================================================================
  # POSTGRESQL DATABASES (Primary, Secondary, Tertiary)
  # ==========================================================================
  - job_name: 'postgres-primary'
    static_configs:
      - targets: ['postgres-primary:5432']
        labels:
          role: 'primary'
          region: 'aws-us-east-1'
    
  - job_name: 'postgres-secondary'
    static_configs:
      - targets: ['postgres-secondary:5432']
        labels:
          role: 'secondary'
          region: 'azure-eastus'
    
  - job_name: 'postgres-tertiary'
    static_configs:
      - targets: ['postgres-tertiary:5432']
        labels:
          role: 'tertiary'
          region: 'gcp-us-central1'

  # ==========================================================================
  # REDIS
  # ==========================================================================
  - job_name: 'redis'
    static_configs:
      - targets: ['redis-service:6379']

  # ==========================================================================
  # KUBERNETES NODE EXPORTER
  # ==========================================================================
  - job_name: 'node-exporter'
    kubernetes_sd_configs:
      - role: node
    relabel_configs:
      - source_labels: [__address__]
        regex: '(.*):10250'
        replacement: '${1}:9100'
        target_label: __address__
      - source_labels: [__meta_kubernetes_node_name]
        target_label: node

  # ==========================================================================
  # KUBERNETES STATE METRICS
  # ==========================================================================
  - job_name: 'kube-state-metrics'
    static_configs:
      - targets: ['kube-state-metrics.kube-system:8080']

  # ==========================================================================
  # KUBERNETES API SERVER
  # ==========================================================================
  - job_name: 'kubernetes-apiservers'
    kubernetes_sd_configs:
      - role: endpoints
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https

  # ==========================================================================
  # KUBERNETES CADVISOR
  # ==========================================================================
  - job_name: 'kubernetes-cadvisor'
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    kubernetes_sd_configs:
      - role: node
    relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

  # ==========================================================================
  # BLACKBOX EXPORTER (Endpoint Monitoring)
  # ==========================================================================
  - job_name: 'blackbox-http'
    metrics_path: /probe
    params:
      module: [http_2xx]
    static_configs:
      - targets:
          - http://credits-service-blue:5004/health
          - http://credits-service-green:5004/health
          - http://credits-service:80/health
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: blackbox-exporter:9115

# =============================================================================
# RECORDING RULES
# =============================================================================
# Create pre-computed metrics for faster dashboard queries

# File: /etc/prometheus/rules/recording_rules.yml
# ---
# groups:
#   - name: credits_service_recording_rules
#     interval: 30s
#     rules:
#       # Request rate by service version
#       - record: credits:request_rate:5m
#         expr: rate(http_requests_total{job=~"credits-service-.*"}[5m])
#       
#       # Error rate
#       - record: credits:error_rate:5m
#         expr: rate(http_requests_total{job=~"credits-service-.*", status=~"5.."}[5m])
#       
#       # P95 latency
#       - record: credits:request_duration:p95
#         expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job=~"credits-service-.*"}[5m]))
#       
#       # Event sourcing throughput
#       - record: event_sourcing:events_written:rate5m
#         expr: rate(event_sourcing_events_written_total[5m])
#       
#       # Database sharding query rate
#       - record: sharding:queries:rate5m
#         expr: rate(sharding_queries_total[5m])
#       
#       # Multi-cloud DR replication lag
#       - record: dr:replication_lag_seconds:max
#         expr: max(replication_lag_seconds) by (source_region, target_region)
#       
#       # Compliance score
#       - record: compliance:score:avg
#         expr: avg(compliance_score) by (framework)
