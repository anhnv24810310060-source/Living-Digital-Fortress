# Docker Compose for PERSON 3 Services
# Business Logic & Infrastructure Services
# âœ… Production-ready configuration

version: '3.8'

services:
  # Shadow Service - Chaos Engineering, DR, Deployment
  shadow-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.shadow
    container_name: shadow-service
    ports:
      - "7070:7070"
    environment:
      - PORT=7070
      - DATABASE_URL=postgres://fortress:fortress2024@postgres:5432/fortress
      - REDIS_URL=redis://redis:6379/3
      - ENABLE_CHAOS=false  # Disabled by default
      - ENABLE_DR=true
      - ENABLE_ZERO_DOWNTIME=true
      - ENABLE_SHARDING=true
      - LOG_LEVEL=info
    depends_on:
      - postgres
      - redis
    networks:
      - fortress-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7070/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - shadow-data:/var/lib/shadow
    labels:
      - "com.fortress.service=shadow"
      - "com.fortress.role=infrastructure"

  # Credits Service - Event Sourcing & CQRS
  credits-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.credits
    container_name: credits-service
    ports:
      - "5002:5002"
    environment:
      - PORT=5002
      - DATABASE_URL=postgres://fortress:fortress2024@postgres:5432/fortress
      - REDIS_URL=redis://redis:6379/4
      - EVENT_STORE_ENABLED=true
      - SNAPSHOT_INTERVAL=100
      - ENABLE_CQRS=true
      - LOG_LEVEL=info
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - fortress-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - credits-data:/var/lib/credits
    labels:
      - "com.fortress.service=credits"
      - "com.fortress.role=business-logic"

  # Digital Twin Service
  digital-twin-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.digital-twin
    container_name: digital-twin-service
    ports:
      - "5003:5003"
    environment:
      - PORT=5003
      - DATABASE_URL=postgres://fortress:fortress2024@postgres:5432/fortress
      - REDIS_URL=redis://redis:6379/5
      - KAFKA_BROKERS=kafka:9092
      - ENABLE_SYNC=true
      - SYNC_INTERVAL=60s
      - LOG_LEVEL=info
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - fortress-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - twin-data:/var/lib/twin
    labels:
      - "com.fortress.service=digital-twin"
      - "com.fortress.role=business-logic"

  # Marketplace Service
  marketplace-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.marketplace
    container_name: marketplace-service
    ports:
      - "5004:5004"
    environment:
      - PORT=5004
      - DATABASE_URL=postgres://fortress:fortress2024@postgres:5432/fortress
      - REDIS_URL=redis://redis:6379/6
      - CREDITS_SERVICE_URL=http://credits-service:5002
      - ENABLE_TRANSACTIONS=true
      - COMMISSION_RATE=0.05
      - LOG_LEVEL=info
    depends_on:
      - postgres
      - redis
      - credits-service
    networks:
      - fortress-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - marketplace-data:/var/lib/marketplace
    labels:
      - "com.fortress.service=marketplace"
      - "com.fortress.role=business-logic"

  # PostgreSQL - Primary Database
  postgres:
    image: postgres:15-alpine
    container_name: fortress-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=fortress
      - POSTGRES_PASSWORD=fortress2024
      - POSTGRES_DB=fortress
      - POSTGRES_MAX_CONNECTIONS=200
      - POSTGRES_SHARED_BUFFERS=256MB
    networks:
      - fortress-network
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fortress"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "com.fortress.service=postgres"
      - "com.fortress.role=database"

  # Redis - Caching and Session Store
  redis:
    image: redis:7-alpine
    container_name: fortress-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - fortress-network
    restart: unless-stopped
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "com.fortress.service=redis"
      - "com.fortress.role=cache"

  # Kafka - Event Streaming
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: fortress-kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    networks:
      - fortress-network
    restart: unless-stopped
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "com.fortress.service=kafka"
      - "com.fortress.role=messaging"

  # Zookeeper - Kafka Coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: fortress-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - fortress-network
    restart: unless-stopped
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "com.fortress.service=zookeeper"
      - "com.fortress.role=coordination"

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: fortress-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - fortress-network
    restart: unless-stopped
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.fortress.service=prometheus"
      - "com.fortress.role=monitoring"

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: fortress-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin2024
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - fortress-network
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
      - ./configs/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./configs/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.fortress.service=grafana"
      - "com.fortress.role=monitoring"

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: fortress-jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"  # Jaeger UI
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - fortress-network
    restart: unless-stopped
    volumes:
      - jaeger-data:/badger
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:14269/"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.fortress.service=jaeger"
      - "com.fortress.role=tracing"

networks:
  fortress-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  shadow-data:
    driver: local
  credits-data:
    driver: local
  twin-data:
    driver: local
  marketplace-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  kafka-data:
    driver: local
  zookeeper-data:
    driver: local
  zookeeper-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  jaeger-data:
    driver: local
