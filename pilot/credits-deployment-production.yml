---
# Production-ready Kubernetes deployment for ShieldX Credits Service
# Person 3: Business Logic & Infrastructure
# Includes: Resource limits, Security policies, Monitoring, Auto-scaling

apiVersion: v1
kind: Namespace
metadata:
  name: shieldx-production
  labels:
    name: shieldx-production
    environment: production
    managed-by: person3

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: credits-config
  namespace: shieldx-production
data:
  PORT: "5004"
  LOG_LEVEL: "info"
  MIGRATE_ON_START: "false"  # Always false in production
  BACKUP_BEFORE_MIGRATE: "true"
  REDIS_ENABLED: "true"
  AUDIT_HMAC_ENABLED: "true"
  CREDITS_API_KEY_REQUIRED: "true"
  
  # Performance tuning
  DB_MAX_OPEN_CONNS: "100"
  DB_MAX_IDLE_CONNS: "25"
  DB_CONN_MAX_LIFETIME: "10m"
  REDIS_POOL_SIZE: "50"
  REDIS_MIN_IDLE_CONNS: "10"
  
  # Security
  TLS_MIN_VERSION: "1.3"
  MTLS_ENABLED: "true"
  RATE_LIMIT_ENABLED: "true"
  RATE_LIMIT_RPM: "1000"
  
  # Monitoring
  METRICS_ENABLED: "true"
  TRACING_ENABLED: "true"
  PROMETHEUS_PORT: "9090"

---
apiVersion: v1
kind: Secret
metadata:
  name: credits-secrets
  namespace: shieldx-production
type: Opaque
stringData:
  DATABASE_URL: "postgres://credits_user:CHANGEME_PROD_PASSWORD@postgres-cluster:5432/credits?sslmode=require"
  REDIS_ADDR: "redis-cluster:6379"
  REDIS_PASSWORD: "CHANGEME_REDIS_PASSWORD"
  AUDIT_HMAC_KEY: "CHANGEME_HMAC_KEY_64_BYTES"
  ENCRYPT_KEY: "CHANGEME_AES256_KEY_32_BYTES"
  CREDITS_API_KEY: "CHANGEME_API_KEY"
  
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: credits-service
  namespace: shieldx-production
  labels:
    app: credits-service
    component: business-logic
    owner: person3
spec:
  replicas: 3  # High availability
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  # Zero downtime deployments
  selector:
    matchLabels:
      app: credits-service
  template:
    metadata:
      labels:
        app: credits-service
        component: business-logic
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        # Force rolling update on config change
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
      serviceAccountName: credits-service-sa
      
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      
      # Pod anti-affinity for HA
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - credits-service
              topologyKey: kubernetes.io/hostname
      
      # Init container for DB migrations (production-safe)
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          until pg_isready -h postgres-cluster -p 5432 -U credits_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: credits-secrets
              key: DATABASE_URL
      
      containers:
      - name: credits
        image: registry.shieldx.io/shieldx/credits:v2.0.0-production
        imagePullPolicy: Always
        
        # Security hardening
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
        
        ports:
        - name: http
          containerPort: 5004
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        env:
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: credits-config
              key: PORT
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: credits-secrets
              key: DATABASE_URL
        - name: REDIS_ADDR
          valueFrom:
            secretKeyRef:
              name: credits-secrets
              key: REDIS_ADDR
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: credits-secrets
              key: REDIS_PASSWORD
        - name: AUDIT_HMAC_KEY
          valueFrom:
            secretKeyRef:
              name: credits-secrets
              key: AUDIT_HMAC_KEY
        - name: ENCRYPT_KEY
          valueFrom:
            secretKeyRef:
              name: credits-secrets
              key: ENCRYPT_KEY
        - name: CREDITS_API_KEY
          valueFrom:
            secretKeyRef:
              name: credits-secrets
              key: CREDITS_API_KEY
        
        # Resource limits (production-tuned)
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 2000m
            memory: 2Gi
        
        # Liveness probe
        livenessProbe:
          httpGet:
            path: /health
            port: 5004
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        # Readiness probe
        readinessProbe:
          httpGet:
            path: /health
            port: 5004
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 2
        
        # Startup probe (allows slower startups)
        startupProbe:
          httpGet:
            path: /health
            port: 5004
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30
        
        # Volume mounts for writable directories
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        - name: data
          mountPath: /app/data
      
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: data
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: credits-service
  namespace: shieldx-production
  labels:
    app: credits-service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
spec:
  type: ClusterIP
  selector:
    app: credits-service
  ports:
  - name: http
    port: 5004
    targetPort: 5004
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  sessionAffinity: None

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: credits-service-hpa
  namespace: shieldx-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: credits-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
      selectPolicy: Min

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: credits-service-pdb
  namespace: shieldx-production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: credits-service

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: credits-service-sa
  namespace: shieldx-production

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: credits-service-role
  namespace: shieldx-production
rules:
- apiGroups: [""]
  resources: ["secrets", "configmaps"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: credits-service-rolebinding
  namespace: shieldx-production
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: credits-service-role
subjects:
- kind: ServiceAccount
  name: credits-service-sa
  namespace: shieldx-production

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: credits-service-netpol
  namespace: shieldx-production
spec:
  podSelector:
    matchLabels:
      app: credits-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow from orchestrator and guardian
  - from:
    - podSelector:
        matchLabels:
          app: orchestrator
    - podSelector:
        matchLabels:
          app: guardian
    ports:
    - protocol: TCP
      port: 5004
  # Allow Prometheus scraping
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  egress:
  # Allow DNS
  - to:
    - namespaceSelector: {}
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
  # Allow PostgreSQL
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  # Allow Redis
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  # Allow HTTPS egress (for external APIs)
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 443

---
# ServiceMonitor for Prometheus Operator
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: credits-service-monitor
  namespace: shieldx-production
  labels:
    app: credits-service
spec:
  selector:
    matchLabels:
      app: credits-service
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
# PrometheusRule for alerting
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: credits-service-alerts
  namespace: shieldx-production
  labels:
    app: credits-service
spec:
  groups:
  - name: credits_service
    interval: 30s
    rules:
    - alert: CreditsServiceDown
      expr: up{job="credits-service"} == 0
      for: 5m
      labels:
        severity: critical
        component: credits
      annotations:
        summary: "Credits service is down"
        description: "Credits service has been down for more than 5 minutes"
    
    - alert: CreditsServiceHighErrorRate
      expr: rate(credits_operations_total{result="error"}[5m]) > 0.05
      for: 10m
      labels:
        severity: warning
        component: credits
      annotations:
        summary: "High error rate in credits service"
        description: "Error rate is {{ $value | humanizePercentage }} over 5 minutes"
    
    - alert: CreditsServiceHighLatency
      expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{service="credits"}[5m])) > 1
      for: 10m
      labels:
        severity: warning
        component: credits
      annotations:
        summary: "High latency in credits service"
        description: "P95 latency is {{ $value }}s"
    
    - alert: CreditsBalanceNegative
      expr: credits_balance < 0
      for: 1m
      labels:
        severity: critical
        component: credits
      annotations:
        summary: "CRITICAL: Negative credit balance detected"
        description: "Account {{ $labels.tenant_id }} has negative balance"
    
    - alert: DatabaseConnectionPoolExhausted
      expr: go_sql_stats_open_connections{service="credits"} / go_sql_stats_max_open_connections{service="credits"} > 0.9
      for: 5m
      labels:
        severity: warning
        component: credits
      annotations:
        summary: "Database connection pool near exhaustion"
        description: "Connection pool usage is {{ $value | humanizePercentage }}"
