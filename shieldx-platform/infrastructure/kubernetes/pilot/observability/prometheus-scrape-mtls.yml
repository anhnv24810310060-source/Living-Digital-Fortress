global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  - /etc/prometheus/alert-rules.yml

# Sample HTTPS scrape with mutual TLS. You must mount valid client cert/key and CA that the target servers trust.
# Files expected inside the Prometheus container:
#   /etc/prometheus/tls/client.crt
#   /etc/prometheus/tls/client.key
#   /etc/prometheus/tls/ca.crt
# NOTE: In this RA-TLS demo, each service uses an in-memory CA. To make Prometheus scrape over mTLS, run a Prometheus instance
# that is issued a client certificate by the same issuer (or share a CA) as your services. This file is a template.
scrape_configs:
  - job_name: 'ingress_mtls'
    scheme: https
    tls_config:
      cert_file: /etc/prometheus/tls/client.crt
      key_file: /etc/prometheus/tls/client.key
      ca_file: /etc/prometheus/tls/ca.crt
      insecure_skip_verify: false
      min_version: TLS13
    static_configs:
      - targets: ['ingress:8081']
  - job_name: 'locator_mtls'
    scheme: https
    tls_config:
      cert_file: /etc/prometheus/tls/client.crt
      key_file: /etc/prometheus/tls/client.key
      ca_file: /etc/prometheus/tls/ca.crt
      insecure_skip_verify: false
      min_version: TLS13
    static_configs:
      - targets: ['locator:8080']
  - job_name: 'verifier_pool_mtls'
    scheme: https
    tls_config:
      cert_file: /etc/prometheus/tls/client.crt
      key_file: /etc/prometheus/tls/client.key
      ca_file: /etc/prometheus/tls/ca.crt
      insecure_skip_verify: false
      min_version: TLS13
    static_configs:
      - targets: ['verifier-pool:8087']
  - job_name: 'ml_orchestrator_mtls'
    scheme: https
    tls_config:
      cert_file: /etc/prometheus/tls/client.crt
      key_file: /etc/prometheus/tls/client.key
      ca_file: /etc/prometheus/tls/ca.crt
      insecure_skip_verify: false
      min_version: TLS13
    static_configs:
      - targets: ['ml-orchestrator:8087']
