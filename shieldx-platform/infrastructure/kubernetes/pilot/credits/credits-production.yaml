---
# Namespace for ShieldX services
apiVersion: v1
kind: Namespace
metadata:
  name: shieldx-prod
  labels:
    name: shieldx-prod
    environment: production
    managed-by: person3

---
# NetworkPolicy - Zero Trust: Deny all by default
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: shieldx-prod
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress

---
# NetworkPolicy - Allow Credits service communication
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: credits-service-policy
  namespace: shieldx-prod
spec:
  podSelector:
    matchLabels:
      app: credits-service
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: orchestrator
        - podSelector:
            matchLabels:
              app: guardian
      ports:
        - protocol: TCP
          port: 5004
  egress:
    - to:
        - podSelector:
            matchLabels:
              app: postgres
      ports:
        - protocol: TCP
          port: 5432
    - to:
        - podSelector:
            matchLabels:
              app: redis
      ports:
        - protocol: TCP
          port: 6379

---
# PodSecurityPolicy for Credits Service
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: credits-restricted
  namespace: shieldx-prod
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  readOnlyRootFilesystem: true

---
# ServiceAccount for Credits Service
apiVersion: v1
kind: ServiceAccount
metadata:
  name: credits-service-sa
  namespace: shieldx-prod
  labels:
    app: credits-service

---
# Role for Credits Service (minimal permissions)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: credits-service-role
  namespace: shieldx-prod
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]

---
# RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: credits-service-rolebinding
  namespace: shieldx-prod
subjects:
  - kind: ServiceAccount
    name: credits-service-sa
    namespace: shieldx-prod
roleRef:
  kind: Role
  name: credits-service-role
  apiGroup: rbac.authorization.k8s.io

---
# ConfigMap for Credits Service
apiVersion: v1
kind: ConfigMap
metadata:
  name: credits-config
  namespace: shieldx-prod
data:
  PORT: "5004"
  LOG_LEVEL: "info"
  MIGRATE_ON_START: "false"
  BACKUP_BEFORE_MIGRATE: "true"
  MAX_OPEN_CONNS: "50"
  MAX_IDLE_CONNS: "25"
  CONN_MAX_LIFETIME: "5m"
  REDIS_ENABLED: "true"
  CACHE_TTL_SECONDS: "60"
  CIRCUIT_BREAKER_MAX_FAILURES: "5"
  CIRCUIT_BREAKER_TIMEOUT: "30s"

---
# Secret for sensitive data (base64 encoded in production)
apiVersion: v1
kind: Secret
metadata:
  name: credits-secrets
  namespace: shieldx-prod
type: Opaque
data:
  # These should be real secrets in production, base64 encoded
  # echo -n "actual_password" | base64
  DATABASE_URL: cG9zdGdyZXM6Ly9jcmVkaXRzX3VzZXI6Y3JlZGl0c19wYXNzMjAyNEBwb3N0Z3Jlcy1zZXJ2aWNlOjU0MzIvY3JlZGl0cw==
  REDIS_PASSWORD: cmVkaXNfcGFzc3dvcmRfMjAyNA==
  AUDIT_HMAC_KEY: YXVkaXRfaG1hY19rZXlfcHJvZHVjdGlvbl8yMDI0
  CREDITS_API_KEY: Y3JlZGl0c19hcGlfa2V5X3Byb2R1Y3Rpb25fMjAyNA==
  ENCRYPTION_KEY: ZW5jcnlwdGlvbl9rZXlfMjU2X2JpdHNfcHJvZHVjdGlvbg==

---
# Deployment for Credits Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: credits-service
  namespace: shieldx-prod
  labels:
    app: credits-service
    version: v2.0.0
    environment: production
spec:
  replicas: 3  # High availability
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  # Zero downtime
  selector:
    matchLabels:
      app: credits-service
  template:
    metadata:
      labels:
        app: credits-service
        version: v2.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5004"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: credits-service-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        fsGroup: 10001
        seccompProfile:
          type: RuntimeDefault
      
      # Anti-affinity: spread pods across nodes
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - credits-service
                topologyKey: kubernetes.io/hostname
      
      containers:
        - name: credits-service
          image: ghcr.io/shieldx/credits-service:v2.0.0
          imagePullPolicy: Always
          
          ports:
            - name: http
              containerPort: 5004
              protocol: TCP
          
          env:
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: credits-config
                  key: PORT
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: credits-secrets
                  key: DATABASE_URL
            - name: REDIS_ADDR
              value: "redis-service:6379"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: credits-secrets
                  key: REDIS_PASSWORD
            - name: AUDIT_HMAC_KEY
              valueFrom:
                secretKeyRef:
                  name: credits-secrets
                  key: AUDIT_HMAC_KEY
            - name: CREDITS_API_KEY
              valueFrom:
                secretKeyRef:
                  name: credits-secrets
                  key: CREDITS_API_KEY
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: credits-config
                  key: LOG_LEVEL
          
          # Resource limits (production tuned)
          resources:
            requests:
              cpu: "500m"
              memory: "512Mi"
            limits:
              cpu: "2000m"
              memory: "2Gi"
          
          # Liveness probe
          livenessProbe:
            httpGet:
              path: /health
              port: 5004
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          
          # Readiness probe
          readinessProbe:
            httpGet:
              path: /health
              port: 5004
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          
          # Startup probe (for slow starts)
          startupProbe:
            httpGet:
              path: /health
              port: 5004
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 30
          
          # Security context
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 10001
            capabilities:
              drop:
                - ALL
          
          # Volume mounts
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: cache
              mountPath: /app/cache
            - name: audit-logs
              mountPath: /app/data
      
      volumes:
        - name: tmp
          emptyDir: {}
        - name: cache
          emptyDir: {}
        - name: audit-logs
          persistentVolumeClaim:
            claimName: credits-audit-logs-pvc

---
# Service for Credits
apiVersion: v1
kind: Service
metadata:
  name: credits-service
  namespace: shieldx-prod
  labels:
    app: credits-service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "5004"
spec:
  type: ClusterIP
  selector:
    app: credits-service
  ports:
    - name: http
      port: 5004
      targetPort: 5004
      protocol: TCP
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800

---
# HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: credits-service-hpa
  namespace: shieldx-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: credits-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300  # Wait 5min before scaling down
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0  # Scale up immediately
      policies:
        - type: Percent
          value: 50
          periodSeconds: 15

---
# PersistentVolumeClaim for audit logs
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: credits-audit-logs-pvc
  namespace: shieldx-prod
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
# PodDisruptionBudget - Ensure high availability during updates
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: credits-service-pdb
  namespace: shieldx-prod
spec:
  minAvailable: 2  # Always keep at least 2 pods running
  selector:
    matchLabels:
      app: credits-service
